geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = mean, linetype = 2)
with(subset(pf, tenure >= 1), summary(friend_count/tenure))
ggplot(aes(x = tenure, y = friend_count/tenure), data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated/tenure), data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
str(yo)
yo <- read.csv('yogurt.csv')
str(yo)
# change id from int to factor
yo$id <- factor(yo$id)
str(yo)
ggplot(aes(x = price), data = yo)
ggplot(aes(x = price), data = yo) + geom_histogram()
ggplot(aes(x = price), data = yo) + geom_histogram(bin = 30)
ggplot(aes(x = price), data = yo) + geom_histogram(bin = 50)
ggplot(aes(x = price), data = yo) + geom_histogram(bin = 100)
ggplot(aes(x = price), data = yo) + geom_histogram()
summary(yo)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
summary(yo$all.purchases)
View(yo)
View(yo)
ggplot(aes(x = all.purchases, y = count), data = yo) + geom_histogram()
ggplot(aes(x = all.purchases), data = yo) + geom_histogram()
ggplot(aes(x = time, y = price), data = yo) + geom_point()
ggplot(aes(x = time, y = price), data = yo) + geom_jitter(alpha = 1/4, shape = 21)
ggplot(aes(x = time, y = price), data = yo) + geom_jitter(alpha = 1/4, shape = 21, fill = 'orange')
ggplot(aes(x = time, y = price), data = yo) + geom_jitter(alpha = 1/4, shape = 21, fill = 'green')
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price), data = subset(yo, id %in% sample.ids)) +
facet_wrap(~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
install.packages('GGally')
library(GGally)
theme_set(theme_minimal(20))
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data("diamonds")
ggplot(aes(x = color, y = price), data = diamonds) +
geom_histogram()
ggplot(aes(x = color, y = price), data = diamonds) +
geom_histogram(binwidth = 200)
ggplot(aes(x = color, y = price), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual')
View(pf)
View(diamonds)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual')
ggplot(aes(x = price, fill = factor(cut)), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual')
ggplot(diamonds, aes(x = price, fill = factor(cut))) +
geom_histogram(binwidth = 200) +
facet_wrap( ~ color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = price, fill = factor(cut)), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual')
$factor
?factor
?aes
ggplot(aes(x = table, y = price), data = diamonds) +
geom_jitter() +
facet_wrap(~color) +
scale_color_brewer(type = 'qual')
ggplot(aes(x = table, y = price, color = cut), data = diamonds) +
geom_jitter() +
facet_wrap(~color) +
scale_color_brewer(type = 'qual')
ggplot(aes(x = table, y = price, color = cut), data = diamonds) +
geom_point() +
facet_wrap(~color) +
scale_color_brewer(type = 'qual')
ggplot(aes(x = price, fill = factor(cut)), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(breaks = seq(quantile(diamonds$depth, 0.1), quantile(diamonds$depth, 0.9), 2))+
ggplot(aes(x = price, fill = factor(cut)), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(breaks = seq(quantile(diamonds$depth, 0.1), quantile(diamonds$depth, 0.9), 2))
ggplot(aes(x = price, fill = factor(cut)), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(breaks = seq(quantile(diamonds$depth, 0.1), quantile(diamonds$depth, 0.9), 2))
ggplot(aes(x = price, fill = factor(cut)), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(breaks = seq(50, 80, 2), lim = c(50, 80))
ggplot(aes(x = price, fill = factor(cut)), data = diamonds) +
geom_histogram(binwidth = 200) +
facet_wrap(~color) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(breaks = seq(50,80,2), lim = c(50,80))
ggplot(aes(x = table, y = price, color = cut), data = diamonds) +
geom_point() +
facet_wrap(~color) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(breaks = seq(50,80,2), lim = c(50,80))
ggplot(aes(x = table, y = price, color = cut), data = diamonds) +
geom_jitter() +
facet_wrap(~color) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(breaks = seq(50,80,2), lim = c(50,80))
library(reshape2)
d <-dcast(diamonds,color~cut,value.var = 'price')
d <-dcast(diamonds,color~cut,value.var = 'price')
with(subset(d,!is.na(Ideal)),summary(Ideal))
with(subset(d,!is.na(Premium)),summary(Premium))
with(subset(d,!is.na(Ideal)),summary(Ideal))
View(d)
View(d)
d <-dcast(diamonds,table~cut,value.var = 'price')
with(subset(d,!is.na(Ideal)),summary(Ideal))
d <-dcast(diamonds,table~cut,value.var = 'price')
with(subset(d,!is.na(Ideal)),summary(Ideal))
with(subset(d,!is.na(Premium)),summary(Premium))
with(subset(d,!is.na(Ideal) & d$Ideal > 0),summary(Ideal))
d <-dcast(diamonds,color~cut,value.var = 'price')
with(subset(d,!is.na(Ideal) & d$Ideal > 0),summary(Ideal))
summary(d$Ideal)
table
d <-dcast(diamonds,table~cut,value.var = 'price')
summary(d$Ideal)
summary(d$Ideal)
d <-dcast(diamonds,table~cut,value.var = 'price')
with(subset(d,!is.na(Ideal) & d$Ideal > 0),summary(Ideal))
with(subset(d,!is.na(Premium) & d$Premium > 0),summary(Premium))
with(subset(d,!is.na(Premium) & d$Premium > 0),summary(Premium))
diamonds$volume = diamonds$x * diamonds$y * diamonds$z
ggplot(aes(x = volume, y = price, color = clarity), data = diamonds) +
geom_point() +
scale_y_log10() +
scale_color_brewer(type = 'div') +
xlim(0, quantile(diamonds$volume, 0.99))
pf <- read.delim('/datasets/ud651/pseudo_facebook.tsv')
pf <- read.delim('/datasets/ud651/pseudo_facebook.tsv')
pf <- read.delim('pseudo_facebook.tsv')
pf$prop_initiated = pf$friendships_initiated / pf$friend_count
pf$year_joined <- floor(2014 - pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined, c(2004, 2009, 2011, 2012, 2014))
ggplot(data = subset(pf, !is.na(year_joined.bucket)), aes(x = tenure, y = prop_initiated, color = year_joined.bucket)) +
geom_line(stat = 'summary', fun.y = mean)
ggplot(data = subset(pf, !is.na(year_joined.bucket)), aes(x = tenure, y = prop_initiated, color = year_joined.bucket)) +
geom_line(stat = 'summary', fun.y = mean) +
geom_smooth()
subs<-subset(pf, year_joined > 2012)
mean(subs$prop_initiated, na.rm = T)
ggplot(diamonds, aes(x = cut, y = price/carat)) +
geom_point(aes(color = diamonds$color), alpha = (1/2), position = position_jitter(width = 0.3)) +
facet_wrap( ~ clarity) +
scale_color_brewer(type = 'div')
getwd()
setwd(/Users/yang/Dropbox/Udacity/DataAnalyst/eda-course-materials/lesson6)
setwd('/Users/yang/Dropbox/Udacity/DataAnalyst/eda-course-materials/lesson6')
ls
ggplot(aes(x = carat, y = price), data = diamonds) + geom_line() +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0,99))
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point() +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0,99))
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0,99)))
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point() +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0,99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0,99)))
data("diamonds")
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point() +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0,99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0,99)))
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point() +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point(fill = I('green'), color = I('black')) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point(fill = I('green'), color = I('red')) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(fill = I('green'), color = I('red')) +
geom_smooth(metho = 'lm')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(fill = I('green'), color = I('red')) +
geom_smooth(method = 'lm')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = I('red'), alpha = 1/4) +
geom_smooth(method = 'lm')
$geom_point
?geom_point
# install these if necessary
install.packages('GGally')
install.packages("GGally")
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages('memisc')
install.packages('scales')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(scales)
# sample 10,000 diamonds from the data set
set.seed(20022012)
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = log10(price))) + geom_histogram() + ggtitle('Price(log10)')
grid.arrange()
plot2 <- ggplot(diamonds, aes(x = price)) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
plot1 <- ggplot(diamonds, aes(x = price)) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
grid.arrange()
plot1 <- ggplot(diamonds$price) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(diamonds$picre) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
grid.arrange()
plot1 <- ggplot(diamonds$price) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(diamonds$price) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
grid.arrange()
plot1 <- ggplot(diamonds, aes(x = price)) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
grid.arrange()
plot1 <- ggplot(diamonds, aes(price)) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(diamonds, aes(price)) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
grid.arrange()
grid.arrange(plot1, plot2, ncol = 2)
plot1 <- ggplot(diamonds, aes(price, color = 'auto')) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(diamonds, aes(price)) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
grid.arrange(plot1, plot2, ncol = 2)
plot2 <- ggplot(diamonds, aes(price, color = 'auto')) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
grid.arrange(plot1, plot2, ncol = 2)
plot1 <- ggplot(diamonds, aes(price)) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(diamonds, aes(price)) + geom_histogram() + scale_x_log10() + ggtitle('Price(log10)')
grid.arrange(plot1, plot2, ncol = 2)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_y_log10()
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_y_log10()
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_y_log10()
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point()
scale_y_log10()
scale_y_log10()
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point()
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point() +
scale_y_log10()
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/4, size = 3/4, position = jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/4, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
data("diamonds")
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point(fill = I('green'), color = I('red')) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = I('red'), alpha = 1/4) +
geom_smooth(method = 'lm')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
#### Use the cuberoot_trans function
```{r Use cuberoot_trans}
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.packages('RCurl')
install.packages("bitops")
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
